# Programmable completion for all BinaryIMST_Library project's bash executable scripts under bash.
# Source this file (or on some systems add it to ~/.bash_completion or to /etc/bash_completion.d/
# and start a new shell) and bash's completion mechanism will know all about scripts' options!
# Provides completion for the build.bash clean.bash config.bash fullBuild.bash memcheck.bash
# and toggleLogs.bash executable scripts. Who wants to read man pages/help text...

_build() {
		local cur prev base opts opts2
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    #
    #  The basic options we'll complete.
    #
    base="all debug shared static doc"
		opts="-f --force"

    #
    #  Complete the arguments to some of the basic commands.
    #
		case "${prev}" in
			all|debug|shared|static)
				COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
				return 0
			;;
			doc)
				COMPREPLY=()
				return 0
			;;
			*)
			;;
		esac
   COMPREPLY=($(compgen -W "${base}" -- ${cur}))  
   return 0
}

_clean() {
		local cur prev base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    #
    #  The basic options we'll complete.
    #
    opts="all debug shared static doc"

    #
    #  Complete the arguments to some of the basic commands.
    #
		case "${prev}" in
			all|debug|shared|static|doc)
				COMPREPLY=()
				return 0
			;;
			*)
			;;
		esac
   COMPREPLY=($(compgen -W "${base}" -- ${cur}))  
   return 0
}

_config() {
    local cur prev base opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    #
    #  The basic options we'll complete.
    #
    base="autocompletion help install initBuild"
    opts="-d --defaults -f --force-yes -p log4cxx graphviz rapidJSON --rapidjson-path --rapidjson-include-path"
    opts1="-p --path"
    #
    #  Complete the arguments to some of the basic commands.
    #
    case "${prev}" in
	install)
	    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
	initBuild)
	    COMPREPLY=( $(compgen -W "${opts1}" -- ${cur}) )
            return 0
            ;;
	help)
	    COMPREPLY=()
            return 0
            ;;
        *)
        ;;
    esac

   COMPREPLY=($(compgen -W "${base}" -- ${cur}))  
   return 0
}

#_fullBuild() 
#{
#
#}

_memcheck() {
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    #
    #  The basic options we'll complete.
    #
    opts="-f --force-yes -r --runnable -o --output -s --suppressions"

    #
    #  Complete the arguments to some of the basic commands.
    #
    case "${prev}" in
		-r|--runnable)
			# Find all files with -x option and get only files that are x-executable
			executables=$(find ./ -type f -executable -exec sh -c "file -i '{}' | grep -q 'x-executable; charset=binary'" \; -print)
			COMPREPLY=( $(compgen -W "${executables}" -- ${cur}) )  
			return 0
	 	;;
		-o|--output)
			COMPREPLY=()
			return 0
		;;
		-s|--suppressions)
			suppressionsFiles=( $(find ./ -type f -name *.supp) )
			COMPREPLY=($(compgen -W "${suppressionsFiles}" -- ${cur}))  
	 		return 0
			;;
		*)
		;;
    esac

   COMPREPLY=($(compgen -W "${opts}" -- ${cur}))  
   return 0
}

#_toggleLogs() 
#{
#
#}

complete -F _build build.bash
complete -F _clean clean.bash
complete -F _config config.bash
#complete -F _fullBuild fullBuild.bash
complete -F _memcheck memcheck.bash
#complete -F _toggleLogs toggleLogs.bash
